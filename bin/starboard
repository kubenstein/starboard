#!/usr/bin/env node

const Starboard    = require('../dist/starboard').Starboard;
const GitContainer = require('../dist/starboard').GitContainer;
const GitStrategy  = require('../dist/starboard').GitStrategy;

const env = process.env;
const port                      = env.PORT                || 9000;
const remoteRepoUrl             = env.REPO_URL            || (() => { throw new Error('REPO_URL env has to be set'); })();
const pathToSshPrivateKey       = env.SSH_KEY_PATH        || '';
const repoCommiterName          = env.REPO_COMMITER_NAME  || 'Starboard BOT';
const repoCommiterEmail         = env.REPO_COMMITER_EMAIL || 'starboardbot@localhost';
const dataBranchName            = env.DATA_BRANCH_NAME    || '__starboard-data';
const remoteRepoSyncingInterval = env.SYNCING_INTERVAL    || 30;
const pathToGitTempLocalRepo    = env.LOCAL_REPO_DIR      || '.tmp/starboardTmpRepo/';
const filesTmpUploadPath        = env.TMP_UPLOAD_PATH     || '.tmp/tmpUploads/';
const logger                    = env.DEBUG               && console


const gitContainer = new GitContainer({
  pathToSshPrivateKey: pathToSshPrivateKey,
  pathToTempLocalRepo: pathToGitTempLocalRepo,
  remoteRepoUrl:       remoteRepoUrl,
  commiterUsername:    repoCommiterName,
  commiterEmail:       repoCommiterEmail,
  dataBranchName:      dataBranchName,
  logger:              logger
});

const gitStrategy = new GitStrategy({
  gitContainer: gitContainer,
  remoteRepoSyncingInterval: remoteRepoSyncingInterval,
  logger: logger,
});

new Starboard({
  port:           port,
  uploadsTmpDir:  filesTmpUploadPath,
  publicFilesDir: pathToGitTempLocalRepo,
  strategy:       gitStrategy,
  logger:         logger
}).start();
